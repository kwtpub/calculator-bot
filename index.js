const TelegramApi = require('node-telegram-bot-api')
const fs = require('fs');
const path = require('path');

const token = '5337124438:AAE04oWHASaPccC_ewRzhcxXtGwc3qTZ8_E'
const bot = new TelegramApi(token, {polling:true})

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
let waitingPushAdmin = false;
let stopbot = false;
let msgWait = null;
let waiting = {
    deposit: false,
    depositMinus: false,
    paid: false,
    buyRate: false,
    sellRate: false,
    setPercentage: false,
};

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ---
let state = {
    deposit: 0,
    procentage: 5,
    paid: 0,
    buyRate: 89,
    sellRate: 90,
    orders: [],
    nextOrderId: 1,
    admins: [934931129, 722365458, 7031413034, 5040590272, 1653318632],
};

const stateFilePath = path.join(__dirname, 'bot_state.json');
const logFilePath = path.join(__dirname, 'log.txt');

// --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
function saveState() {
    try {
        fs.writeFileSync(stateFilePath, JSON.stringify(state, null, 2), 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function loadState() {
    try {
        if (fs.existsSync(stateFilePath)) {
            const fileContent = fs.readFileSync(stateFilePath, 'utf8');
            const loadedState = JSON.parse(fileContent);
            // –°–ª–∏—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            state = { ...state, ...loadedState };
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if (state.orders.length > 0 && state.orders.some(o => o.id)) {
                const maxId = Math.max(...state.orders.map(o => o.id));
                state.nextOrderId = maxId + 1;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function logTransaction(message) {
    const timestamp = new Date().toLocaleString('ru-RU');
    const logMessage = `[${timestamp}] ${message}\n`;
    try {
        fs.appendFileSync(logFilePath, logMessage, 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', error);
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
function formatUSD(currency) {
    const rate = state.buyRate; 
    if (rate === 0) return '$0.00';
    const USD = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });
    return USD.format(currency / rate);
}

function formatRUB(currency) {
    const RUB = new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' });
    return RUB.format(currency);
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function start() {
    loadState(); 

    const commands = [
        { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å–∫/–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
        { command: 'info', description: 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö' },
        { command: 'deposit', description: 'üí∞ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç' },
        { command: 'expense', description: 'üí∏ –°–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥' },
        { command: 'paid', description: 'üìà –í–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—ã' },
        { command: 'close', description: '‚òëÔ∏è –ó–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä' },
        { command: 'setbuyrate', description: 'üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏' },
        { command: 'setsellrate', description: 'üí≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏' },
        { command: 'setpercentage', description: '‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç' },
        { command: 'cancelorder', description: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä' },
        { command: 'addadmin', description: 'üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' },
        { command: 'getuserid', description: 'üÜî –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID' },
        { command: 'stop', description: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞' },
    ];
    
    bot.setMyCommands(commands);

    bot.on('message', async (msg) => {
        console.log(JSON.stringify(msg, null, 2));
        if (!msg.text) {
            return;
        }

        const chatId = msg.chat.id;
        const text = msg.text;
        const userId = msg.from.id;
        const isAdmin = state.admins.includes(userId);

        let normalizedMessage = text.split(' ')[0].toLowerCase();
        if (normalizedMessage.includes('@')) {
            normalizedMessage = normalizedMessage.split('@')[0];
        }
        
        if (stopbot && normalizedMessage !== '/start') {
            return;
        }

        const num = parseFloat(text);
        if (!isNaN(num) && msgWait) {
            let processed = false;
            if (waiting.deposit) {
                state.deposit += num;
                bot.sendMessage(chatId, `–î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${formatRUB(num)}. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${formatRUB(state.deposit)}`);
                logTransaction(`Deposit added: ${formatRUB(num)}. Total: ${formatRUB(state.deposit)}`);
                processed = true;
            } else if (waiting.depositMinus) {
                state.deposit -= num;
                bot.sendMessage(chatId, `–°–ø–∏—Å–∞–Ω —Ä–∞—Å—Ö–æ–¥ –Ω–∞ ${formatRUB(num)}. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${formatRUB(state.deposit)}`);
                logTransaction(`Expense: ${formatRUB(num)}. Total deposit: ${formatRUB(state.deposit)}`);
                processed = true;
            } else if (waiting.paid) {
                state.paid += num;
                bot.sendMessage(chatId, `–ó–∞—á–∏—Å–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞: ${formatRUB(num)}. –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: ${formatRUB(state.paid)}`);
                logTransaction(`Paid: ${formatRUB(num)}. Total: ${formatRUB(state.paid)}`);
                processed = true;
            } else if (waiting.buyRate) {
                state.buyRate = num;
                bot.sendMessage(chatId, `–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1$ = ${formatRUB(state.buyRate)}`);
                logTransaction(`Buy rate set to: ${state.buyRate}`);
                processed = true;
            } else if (waiting.sellRate) {
                state.sellRate = num;
                bot.sendMessage(chatId, `–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1$ = ${formatRUB(state.sellRate)}`);
                logTransaction(`Sell rate set to: ${state.sellRate}`);
                processed = true;
            } else if (waiting.setPercentage) {
                state.procentage = num;
                bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${state.procentage}%`);
                logTransaction(`Percentage set to: ${state.procentage}`);
                processed = true;
            } else if (waitingPushAdmin) {
                if (!state.admins.includes(num)) {
                    state.admins.push(num);
                    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${num} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.`);
                    logTransaction(`Admin added: ${num}`);
                } else {
                    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${num} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.`);
                }
                processed = true;
            }

            if(processed) {
                await bot.deleteMessage(msgWait.chat.id, msgWait.message_id).catch(e => console.error("Could not delete message:", e.message));
                Object.keys(waiting).forEach(k => waiting[k] = false);
                waitingPushAdmin = false;
                msgWait = null;
                saveState();
                return;
            }
        }

        if (text.startsWith('+') && !isNaN(parseFloat(text.slice(1)))) {
            const buyAmount = parseFloat(text.slice(1));
            const order = {
                id: state.nextOrderId++,
                buyAmountRUB: buyAmount,
                status: 'open',
                profitRUB: null,
                sellAmountRUB: null,
                openTimestamp: new Date().toISOString(),
            };
            state.orders.push(order);
            saveState();
            logTransaction(`Opened order #${order.id} for ${formatRUB(buyAmount)}`);
            return bot.sendMessage(chatId, `‚úÖ –û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä #${order.id} –Ω–∞ —Å—É–º–º—É ${formatRUB(buyAmount)}`);
        }
        
        if (text.startsWith('-') && text.split(' ').length === 2) {
             const parts = text.slice(1).split(' ');
             const orderId = parseInt(parts[0], 10);
             const sellAmount = parseFloat(parts[1]);

             if (isNaN(orderId) || isNaN(sellAmount)) {
                 return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -<ID> <—Å—É–º–º–∞>');
             }
             
            const order = state.orders.find(o => o.id === orderId && o.status === 'open');
            if (!order) {
                return bot.sendMessage(chatId, `–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä —Å ID #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }

            order.status = 'closed';
            order.sellAmountRUB = sellAmount;
            order.profitRUB = order.sellAmountRUB - order.buyAmountRUB;
            order.closeTimestamp = new Date().toISOString();
            
            saveState();
            logTransaction(`Closed order #${order.id} for ${formatRUB(sellAmount)}. Profit: ${formatRUB(order.profitRUB)}`);

            const profitMessage = order.profitRUB >= 0 ? `üí∞ –ü—Ä–æ—Ñ–∏—Ç: ${formatRUB(order.profitRUB)}` : `üîª –£–±—ã—Ç–æ–∫: ${formatRUB(order.profitRUB)}`;
            return bot.sendMessage(chatId, `‚òëÔ∏è –û—Ä–¥–µ—Ä #${orderId} –∑–∞–∫—Ä—ã—Ç.\n–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: ${formatRUB(sellAmount)}\n${profitMessage}`);
        }
        
        switch (normalizedMessage) {
            case '/start':
                stopbot = false;
                return bot.sendMessage(chatId, `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
            case '/info': {
                const openOrders = state.orders.filter(o => o.status === 'open');
                const closedOrders = state.orders.filter(o => o.status === 'closed');

                const totalProfit = closedOrders.reduce((sum, o) => sum + (o.profitRUB || 0), 0);
                const profitAfterPercentage = totalProfit - (totalProfit * state.procentage / 100);
                const readyForPayment = profitAfterPercentage - state.paid;

                const openOrdersValue = openOrders.reduce((sum, o) => sum + o.buyAmountRUB, 0);

                let infoText = `üìä *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n`;
                infoText += `üí∞ *–î–µ–ø–æ–∑–∏—Ç:* ${formatRUB(state.deposit)}\n`;
                infoText += `üí≤ *–ö—É—Ä—Å—ã:* ${state.buyRate} / ${state.sellRate} (–ü–æ–∫—É–ø–∫–∞/–ü—Ä–æ–¥–∞–∂–∞)\n`;
                infoText += `‚öôÔ∏è *–ü—Ä–æ—Ü–µ–Ω—Ç:* ${state.procentage}%\n\n`;
                
                infoText += `üìà *–§–∏–Ω–∞–Ω—Å—ã*\n`;
                infoText += ` - –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: ${formatRUB(totalProfit)}\n`;
                infoText += ` - –ü—Ä–æ—Ñ–∏—Ç (-%): ${formatRUB(profitAfterPercentage)}\n`;
                infoText += ` - –í—ã–ø–ª–∞—á–µ–Ω–æ: ${formatRUB(state.paid)}\n`;
                infoText += ` - *–ö –≤—ã–ø–ª–∞—Ç–µ:* ${formatRUB(readyForPayment)}\n\n`;

                infoText += `üìã *–û—Ä–¥–µ—Ä–∞ –≤ —Ä–∞–±–æ—Ç–µ (${openOrders.length} —à—Ç.):* ${formatRUB(openOrdersValue)}\n`;
                if (openOrders.length > 0) {
                     openOrders.slice(-10).forEach(o => {
                        infoText += `   - –û—Ä–¥–µ—Ä #${o.id}: ${formatRUB(o.buyAmountRUB)}\n`;
                    });
                } else {
                    infoText += `   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.\n`;
                }

                return bot.sendMessage(chatId, infoText, { parse_mode: 'Markdown' });
            }
            case '/deposit':
                if (isAdmin) {
                    waiting.deposit = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/expense':
                 if (isAdmin) {
                    waiting.depositMinus = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –¥–µ–ø–æ–∑–∏—Ç–∞:`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/paid':
                if (isAdmin) {
                    waiting.paid = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã:`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/close': {
                if (!isAdmin) return bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                
                const args = text.split(' ');
                if (args.length !== 3) {
                    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /close <ID> <—Å—É–º–º–∞>');
                }
                const orderId = parseInt(args[1], 10);
                const sellAmount = parseFloat(args[2]);

                if (isNaN(orderId) || isNaN(sellAmount)) {
                    return bot.sendMessage(chatId, 'ID –æ—Ä–¥–µ—Ä–∞ –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.');
                }
                
                const order = state.orders.find(o => o.id === orderId && o.status === 'open');
                if (!order) {
                    return bot.sendMessage(chatId, `–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä —Å ID #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                }

                order.status = 'closed';
                order.sellAmountRUB = sellAmount;
                order.profitRUB = order.sellAmountRUB - order.buyAmountRUB;
                order.closeTimestamp = new Date().toISOString();
                
                saveState();
                logTransaction(`Closed order #${order.id} for ${formatRUB(sellAmount)}. Profit: ${formatRUB(order.profitRUB)}`);

                const profitMessage = order.profitRUB >= 0 ? `üí∞ –ü—Ä–æ—Ñ–∏—Ç: ${formatRUB(order.profitRUB)}` : `üîª –£–±—ã—Ç–æ–∫: ${formatRUB(order.profitRUB)}`;
                return bot.sendMessage(chatId, `‚òëÔ∏è –û—Ä–¥–µ—Ä #${orderId} –∑–∞–∫—Ä—ã—Ç.\n–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: ${formatRUB(sellAmount)}\n${profitMessage}`);
            }
            case '/cancelorder': {
                 if (!isAdmin) return bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');

                const args = text.split(' ');
                if (args.length !== 2) {
                    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancelorder <ID>');
                }
                const orderId = parseInt(args[1], 10);
                if (isNaN(orderId)) {
                    return bot.sendMessage(chatId, 'ID –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
                }

                const orderIndex = state.orders.findIndex(o => o.id === orderId);
                if (orderIndex === -1) {
                    return bot.sendMessage(chatId, `–û—Ä–¥–µ—Ä —Å ID #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                }
                if (state.orders[orderIndex].status === 'closed') {
                    return bot.sendMessage(chatId, `–û—Ä–¥–µ—Ä #${orderId} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.`);
                }

                const [cancelledOrder] = state.orders.splice(orderIndex, 1);
                saveState();
                logTransaction(`Cancelled order #${cancelledOrder.id}`);
                return bot.sendMessage(chatId, `‚ùå –û—Ä–¥–µ—Ä #${cancelledOrder.id} –Ω–∞ —Å—É–º–º—É ${formatRUB(cancelledOrder.buyAmountRUB)} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`);
            }
            case '/setbuyrate':
                if (isAdmin) {
                    waiting.buyRate = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ü–û–ö–£–ü–ö–ò (1$ = ? RUB):`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/setsellrate':
                if (isAdmin) {
                    waiting.sellRate = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ü–†–û–î–ê–ñ–ò (1$ = ? RUB):`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/setpercentage':
                if (isAdmin) {
                    waiting.setPercentage = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/stop':
                if (isAdmin) {
                    stopbot = true;
                    bot.sendMessage(chatId, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
            case '/getuserid':
                bot.sendMessage(chatId, `–í–∞—à ID: \`${userId}\``, { parse_mode: 'Markdown' });
                break;
            case '/addadmin':
                if (isAdmin) {
                    waitingPushAdmin = true;
                    msgWait = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:`);
                } else {
                    bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
                }
                break;
        }
    });
}

start()