const TelegramApi = require('node-telegram-bot-api');
const core = require('./app/core/botCore');
const helpers = require('./app/util/helpers');

const token = '8177306110:AAEvI3t25aHlc54jbYB-o4A-20MnRyrCDbI';
const bot = new TelegramApi(token, { polling: true });

core.loadState();

// --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ ---
const waiting = {};
const msgWait = {};
const waitingPushAdmin = {};
const stopbot = {};

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const chatState = core.getChatState(chatId);
    if (!Array.isArray(chatState.admins)) chatState.admins = [934931129, 722365458, 7031413034, 5040590272, 1653318632];
    const isAdmin = chatState.admins.includes(userId);
    const text = msg.text;
    if (!text) return;

    if (!waiting[chatId]) waiting[chatId] = {};
    if (!msgWait[chatId]) msgWait[chatId] = null;
    if (!waitingPushAdmin[chatId]) waitingPushAdmin[chatId] = false;
    if (!stopbot[chatId]) stopbot[chatId] = false;

    let normalizedMessage = text.split(' ')[0].toLowerCase().trim();
    if (normalizedMessage.includes('@')) {
        normalizedMessage = normalizedMessage.split('@')[0];
    }

    if (stopbot[chatId] && normalizedMessage !== '/start') return;

    const num = parseFloat(text);
    if (!isNaN(num) && msgWait[chatId]) {
        let processed = false;
        if (waiting[chatId].deposit) {
            if (typeof chatState.deposit !== 'number') chatState.deposit = 0;
            chatState.deposit += num;
            bot.sendMessage(chatId, `–î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${num} USDT. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${chatState.deposit} USDT`);
            helpers.logTransaction(`–î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${num} USDT. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${chatState.deposit} USDT`, core.logFilePath);
            processed = true;
        } else if (waiting[chatId].withdrawRUB) {
            if (typeof chatState.withdrawRUB !== 'number') chatState.withdrawRUB = 0;
            chatState.withdrawRUB += num;
            bot.sendMessage(chatId, `–°—É–º–º–∞ –ø–µ—Ä–µ–≥–Ω–∞–Ω–Ω—ã—Ö –≤ RUB —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ${helpers.formatRUB(num)}. –í—Å–µ–≥–æ –ø–µ—Ä–µ–≥–Ω–∞–Ω–æ: ${helpers.formatRUB(chatState.withdrawRUB)}`);
            helpers.logTransaction(`–°—É–º–º–∞ –ø–µ—Ä–µ–≥–Ω–∞–Ω–Ω—ã—Ö –≤ RUB —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ${helpers.formatRUB(num)}. –í—Å–µ–≥–æ –ø–µ—Ä–µ–≥–Ω–∞–Ω–æ: ${helpers.formatRUB(chatState.withdrawRUB)}`, core.logFilePath);
            processed = true;
        } else if (waiting[chatId].depositMinus) {
            bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /usecard <ID>");
            processed = true;
        } else if (waiting[chatId].paid) {
            bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /usecard <ID>");
            processed = true;
        } else if (waiting[chatId].buyRate) {
            chatState.buyRate = num;
            bot.sendMessage(chatId, `–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1$ = ${helpers.formatRUB(chatState.buyRate)}`);
            helpers.logTransaction(`Buy rate set to: ${chatState.buyRate}`, core.logFilePath);
            processed = true;
        } else if (waiting[chatId].sellRate) {
            chatState.sellRate = num;
            bot.sendMessage(chatId, `–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1$ = ${helpers.formatRUB(chatState.sellRate)}`);
            helpers.logTransaction(`Sell rate set to: ${chatState.sellRate}`, core.logFilePath);
            processed = true;
        } else if (waiting[chatId].setPercentage) {
            chatState.procentage = num;
            bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${chatState.procentage}%`);
            helpers.logTransaction(`Percentage set to: ${chatState.procentage}`, core.logFilePath);
            processed = true;
        } else if (waitingPushAdmin[chatId]) {
            if (!chatState.admins.includes(num)) {
                chatState.admins.push(num);
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${num} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.`);
                helpers.logTransaction(`Admin added: ${num}`, core.logFilePath);
            } else {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${num} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.`);
            }
            processed = true;
        }
        if (processed) {
            if (msgWait[chatId]) await bot.deleteMessage(msgWait[chatId].chat.id, msgWait[chatId].message_id).catch(() => {});
            waiting[chatId] = {};
            waitingPushAdmin[chatId] = false;
            msgWait[chatId] = null;
            core.saveState();
            return;
        }
    }

    if (text.startsWith('+') && !isNaN(parseFloat(text.slice(1)))) {
        if (typeof chatState.deposit !== 'number') chatState.deposit = 0;
        let amount = parseFloat(text.slice(1));
        chatState.deposit += amount;
        core.saveState();
        helpers.logTransaction(`–î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${amount} USDT. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${chatState.deposit} USDT`, core.logFilePath);
        return bot.sendMessage(chatId, `‚úÖ –î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${amount} USDT. –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${chatState.deposit} USDT`);
    }

    if (text.startsWith('-') && !isNaN(parseFloat(text.slice(1)))) {
        if (typeof chatState.deposit !== 'number') chatState.deposit = 0;
        if (!Array.isArray(chatState.usdtOutHistory)) chatState.usdtOutHistory = [];
        let amount = parseFloat(text.slice(1));
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞
        waiting[chatId].usdtOut = amount;
        msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ USDT –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:`);
        return;
    }

    // –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏
    if (!isNaN(num) && waiting[chatId].usdtOut) {
        let usdtAmount = waiting[chatId].usdtOut;
        let sellRate = num;
        let rubAmount = usdtAmount * sellRate;
        chatState.deposit -= usdtAmount;
        chatState.withdrawRUB = (typeof chatState.withdrawRUB === 'number' ? chatState.withdrawRUB : 0) + rubAmount;
        chatState.usdtOutHistory.push({ usdt: usdtAmount, rub: rubAmount });
        core.saveState();
        helpers.logTransaction(`–° –¥–µ–ø–æ–∑–∏—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${usdtAmount} USDT –ø–æ –∫—É—Ä—Å—É ${sellRate}. –ü–µ—Ä–µ–≥–Ω–∞–Ω–æ –≤ RUB: ${helpers.formatRUB(rubAmount)}`, core.logFilePath);
        bot.sendMessage(chatId, `üí∏ –° –¥–µ–ø–æ–∑–∏—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${usdtAmount} USDT –ø–æ –∫—É—Ä—Å—É ${sellRate}. –ü–µ—Ä–µ–≥–Ω–∞–Ω–æ –≤ RUB: ${helpers.formatRUB(rubAmount)}`);
        waiting[chatId].usdtOut = null;
        msgWait[chatId] = null;
        return;
    }

    // –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (waiting[chatId] && waiting[chatId].adminDeposit) {
        if (!isNaN(num)) {
            if (typeof chatState.deposit !== 'number') chatState.deposit = 0;
            chatState.deposit += num;
            core.saveState();
            bot.editMessageText('–°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞, —Ö–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã!', { chat_id: chatId, message_id: msgWait[chatId].message_id });
            waiting[chatId].adminDeposit = false;
            msgWait[chatId] = null;
            return;
        }
    }

    switch (normalizedMessage) {
        case '/start':
            stopbot[chatId] = false;
            return bot.sendMessage(chatId, `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
        case '/info': {
            let infoText = 'üìä <b>–°–≤–æ–¥–∫–∞</b>\n\n';
            if (chatState.sessionMode === 'USDT_TO_RUB') {
                infoText += `üí≤ <b>–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞:</b> `;
                if (Array.isArray(chatState.usdtOutHistory) && chatState.usdtOutHistory.length > 0) {
                    const totalRub = chatState.usdtOutHistory.reduce((s, o) => s + o.rub, 0);
                    const totalUsdt = chatState.usdtOutHistory.reduce((s, o) => s + o.usdt, 0);
                    const avg = totalUsdt > 0 ? (totalRub / totalUsdt) : 0;
                    infoText += `<b>${avg.toFixed(2)}</b>\n`;
                } else {
                    infoText += `<i>–Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</i>\n`;
                }
            } else {
                infoText += `üí≤ <b>–ö—É—Ä—Å—ã:</b> <b>${chatState.buyRate}</b> / <b>${chatState.sellRate}</b> (–ü–æ–∫—É–ø–∫–∞/–ü—Ä–æ–¥–∞–∂–∞)\n`;
            }
            if (typeof chatState.deposit === 'number') {
                infoText += `üí∞ <b>–î–µ–ø–æ–∑–∏—Ç:</b> <b>${chatState.deposit} USDT</b>\n`;
            }
            if (typeof chatState.withdrawRUB === 'number' && chatState.withdrawRUB > 0) {
                infoText += `üí∏ <b>–ü–µ—Ä–µ–≥–Ω–∞–Ω–æ –≤ RUB:</b> <b>${helpers.formatRUB(chatState.withdrawRUB)}</b>\n`;
            }
            if (chatState.sessionMode) {
                let modeText = '';
                if (chatState.sessionMode === 'RUB_TO_USDT') modeText = '–ü–µ—Ä–µ–≥–æ–Ω RUB -> USDT';
                if (chatState.sessionMode === 'USDT_TO_RUB') modeText = '–ü–µ—Ä–µ–≥–æ–Ω USDT -> RUB';
                if (chatState.sessionMode === 'ARBITRAGE') modeText = '–ê—Ä–±–∏—Ç—Ä–∞–∂';
                infoText += `\n‚öôÔ∏è <b>–†–µ–∂–∏–º:</b> <b>${modeText}</b>\n`;
            }
            return bot.sendMessage(chatId, infoText, { parse_mode: 'HTML' });
        }
        case '/setbuyrate':
            if (isAdmin) {
                waiting[chatId].buyRate = true;
                msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ü–û–ö–£–ü–ö–ò (1$ = ? RUB):`);
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/setsellrate':
            if (isAdmin) {
                waiting[chatId].sellRate = true;
                msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ü–†–û–î–ê–ñ–ò (1$ = ? RUB):`);
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/setpercentage':
            if (isAdmin) {
                waiting[chatId].setPercentage = true;
                msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:`);
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/stop':
            if (isAdmin) {
                stopbot[chatId] = true;
                bot.sendMessage(chatId, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/getuserid':
            bot.sendMessage(chatId, `–í–∞—à ID: \`${userId}\``, { parse_mode: 'Markdown' });
            break;
        case '/addadmin':
            if (isAdmin) {
                waitingPushAdmin[chatId] = true;
                msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:`);
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/deposit':
            if (isAdmin) {
                if (chatState.sessionMode === 'USDT_TO_RUB') {
                    waiting[chatId].deposit = true;
                    msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USDT:`);
                } else {
                    waiting[chatId].deposit = true;
                    msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USDT:`);
                }
            } else {
                bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            }
            break;
        case '/admin': {
            if (!isAdmin) return bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
            if (!chatState.sessionMode) {
                const inlineKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'RUB -> USDT', callback_data: 'RUB_TO_USDT' }],
                            [{ text: 'USDT -> RUB', callback_data: 'USDT_TO_RUB' }],
                            [{ text: '–ê—Ä–±–∏—Ç—Ä–∞–∂', callback_data: 'ARBITRAGE' }],
                        ]
                    }
                };
                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', inlineKeyboard);
            } else {
                // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –¥–µ–ø–æ–∑–∏—Ç
                waiting[chatId].adminDeposit = true;
                msgWait[chatId] = await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ USDT:');
            }
            break;
        }
        case '/withdrawrub': {
            if (!isAdmin) return bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            if (chatState.sessionMode !== 'USDT_TO_RUB') return bot.sendMessage(chatId, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ USDT -> RUB');
            waiting[chatId].withdrawRUB = true;
            msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB, –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–≥–Ω–∞–ª–∏ –∏–∑ USDT:`);
            break;
        }
        case '/reset': {
            if (!isAdmin) return bot.sendMessage(chatId, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ');
            const def = core.getChatState(chatId);
            Object.keys(def).forEach(k => delete def[k]);
            const newState = { procentage: 5, buyRate: 89, sellRate: 90 };
            Object.assign(def, newState);
            core.saveState();
            return bot.sendMessage(chatId, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.');
        }
        case '/history': {
            if (!Array.isArray(chatState.usdtOutHistory) || chatState.usdtOutHistory.length === 0) {
                return bot.sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');
            }
            let msg = '–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ USDT ‚Üí RUB:\n';
            chatState.usdtOutHistory.forEach((op, idx) => {
                msg += `${idx + 1}. ${op.usdt} USDT ‚Üí ${helpers.formatRUB(op.rub)}\n`;
            });
            return bot.sendMessage(chatId, msg);
        }
        case '/editout': {
            const args = text.split(' ');
            if (args.length !== 2) return bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π: /editout N');
            const idx = parseInt(args[1], 10) - 1;
            if (isNaN(idx) || !chatState.usdtOutHistory || !chatState.usdtOutHistory[idx]) return bot.sendMessage(chatId, '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            waiting[chatId].editOutIdx = idx;
            msgWait[chatId] = await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ #${idx + 1} (–±—ã–ª–æ: ${chatState.usdtOutHistory[idx].usdt} USDT ‚Üí ${helpers.formatRUB(chatState.usdtOutHistory[idx].rub)}):`);
            return;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if (msg.text === 'RUB -> USDT' || msg.text === 'USDT -> RUB' || msg.text === '–ê—Ä–±–∏—Ç—Ä–∞–∂') {
        if (isAdmin) {
            let mode = '';
            if (msg.text === 'RUB -> USDT') mode = 'RUB_TO_USDT';
            if (msg.text === 'USDT -> RUB') mode = 'USDT_TO_RUB';
            if (msg.text === '–ê—Ä–±–∏—Ç—Ä–∞–∂') mode = 'ARBITRAGE';
            chatState.sessionMode = mode;
            core.saveState();
            return bot.sendMessage(chatId, `–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${msg.text}`);
        }
    }

    // –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è /editout
    if (!isNaN(num) && waiting[chatId].editOutIdx !== undefined) {
        const idx = waiting[chatId].editOutIdx;
        const op = chatState.usdtOutHistory[idx];
        if (op) {
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º RUB –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            op.rub = op.usdt * num;
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º withdrawRUB –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
            chatState.withdrawRUB = chatState.usdtOutHistory.reduce((s, o) => s + o.rub, 0);
            core.saveState();
            bot.sendMessage(chatId, `–û–ø–µ—Ä–∞—Ü–∏—è #${idx + 1} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${op.usdt} USDT ‚Üí ${helpers.formatRUB(op.rub)}`);
        }
        waiting[chatId].editOutIdx = undefined;
        msgWait[chatId] = null;
        return;
    }
});

// –î–æ–±–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const chatState = core.getChatState(chatId);
    if (!Array.isArray(chatState.admins)) chatState.admins = [934931129, 722365458, 7031413034, 5040590272, 1653318632];
    const isAdmin = chatState.admins.includes(userId);
    if (!isAdmin) return bot.answerCallbackQuery(query.id, { text: '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', show_alert: true });
    let mode = '';
    if (query.data === 'RUB_TO_USDT') mode = 'RUB_TO_USDT';
    if (query.data === 'USDT_TO_RUB') mode = 'USDT_TO_RUB';
    if (query.data === 'ARBITRAGE') mode = 'ARBITRAGE';
    if (mode) {
        chatState.sessionMode = mode;
        core.saveState();
        // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –¥–µ–ø–æ–∑–∏—Ç, –∑–∞–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        waiting[chatId].adminDeposit = true;
        await bot.editMessageText('–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ USDT:', { chat_id: chatId, message_id: query.message.message_id });
        msgWait[chatId] = { chat: { id: chatId }, message_id: query.message.message_id };
        return bot.answerCallbackQuery(query.id, { text: '–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω' });
    }
});

// –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:
bot.setMyCommands([
    { command: 'info', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É' },
    { command: 'deposit', description: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç (USDT)' },
    { command: 'setbuyrate', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏' },
    { command: 'setsellrate', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏' },
    { command: 'setpercentage', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç' },
    { command: 'admin', description: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º' },
    { command: 'reset', description: '–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–æ—Ç–∞' },
    { command: 'history', description: '–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ USDT ‚Üí RUB' },
    { command: 'editout', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–π: /editout N)' },
]);

console.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏...');